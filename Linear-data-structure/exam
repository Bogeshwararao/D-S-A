L1=[1,2,3,4,5]
print(L1)
x=int(input("enter the value to be inserted"))
pos=int(input("enter position"))
L1.append(0)
for i in range(len(L1)-1,pos-1,-1):
    L1[i]=L1[i-1]
    L1[pos-1]=x
print(L1)


L1=[1,2,3,4,5,6]
print(L1)
x=int(input("enter the value to be deleted:"))
for i in range(0,len(L1)):
    if (L1[i]==x):
       break;
    pos = i+1
for j in range(pos,len(L1)-1):
   L1[j]=L1[j+1]
L1.pop()
print(L1)

a=[5,1,4,3,6,2]
print("insertion sort")
print("before sorting")
print(a)
for i in range(1,len(a)):
    j=i-1
    while j>=0 and a[j]>a[j+1]:
        t=a[j]
        a[j]=a[j+1]
        a[j+1]=t
        j=j-1
print("after sorting")
print(a)


class Conversion: 
 # Constructor to initialize the class variables 
 def __init__(self, capacity): 
 self.top = -1 
 self.capacity = capacity 
 self.array = [] 
 self.output = [] 
 self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3} 
 
 # check if the stack is empty 
 def isEmpty(self): 
 if self.top == -1:
return True 
 else :
 return False
 
 # Return the value of the top of the stack 
 def peek(self): 
 return self.array[-1] 
 
 # Pop the element from the stack 
 def pop(self): 
 if not self.isEmpty(): 
 self.top -= 1
 return self.array.pop()
 else: 
 return "$"
 
 # Push the element to the stack 
 def push(self, op): 
 self.top += 1
 self.array.append(op) 
 
 # A utility function to check is the given character is operand 
 def isOperand(self, ch): 
 return ch.isalpha()
 
 # Check if the precedence of operator is strictly less than top of stack or not 
 def notGreater(self, i): 
 try: 
 a = self.precedence[i] 
 b = self.precedence[self.peek()] 
 if a <= b :
 return True 
else :
 return False
 except KeyError: 
 return False
 
 # Function that converts given infix expression to postfix expression 
 def infixToPostfix(self, exp): 
 for i in exp: 
 # If the character is an operand, 
 # add it to output 
 if self.isOperand(i): 
 self.output.append(i) 
 
 # If the character is an '(', push it to stack 
 elif i == '(':
 self.push(i) 
 
 # If the scanned character is an ')', pop and 
 # output from the stack until and '(' is found 
 elif i == ')': 
 while( (not self.isEmpty()) and self.peek() != '('): 
 a = self.pop()
 self.output.append(a) 
 if (not self.isEmpty() and self.peek() != '('): 
 return -1
 else: 
 self.pop()
 
 # An operator is encountered 
 else: 
 while(not self.isEmpty() and self.notGreater(i)): 
 self.output.append(self.pop()) 
 self.push(i) 
 
 # pop all the operator from the stack 
 print("\nPostfix Notation : ")
 while not self.isEmpty(): 
 self.output.append(self.pop()) 
 print("".join(self.output)) 
 
# Program to test above function 
exp = "a+b*(c^d-e)^(f+g*h)-i"
print("\n\nInfix Notation :",exp)
obj = Conversion(len(exp)) 
obj.infixToPostfix(exp)

